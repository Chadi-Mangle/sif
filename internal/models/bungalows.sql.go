// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: bungalows.sql

package models

import (
	"context"
	"database/sql"
)

const createBungalow = `-- name: CreateBungalow :one
INSERT INTO bungalows (capacity) 
VALUES ($1)
RETURNING id, capacity
`

func (q *Queries) CreateBungalow(ctx context.Context, capacity int32) (Bungalow, error) {
	row := q.db.QueryRow(ctx, createBungalow, capacity)
	var i Bungalow
	err := row.Scan(&i.ID, &i.Capacity)
	return i, err
}

const getBungalowByID = `-- name: GetBungalowByID :one
SELECT id, capacity, users FROM bungalows_users WHERE id = $1
`

func (q *Queries) GetBungalowByID(ctx context.Context, id int32) (BungalowsUser, error) {
	row := q.db.QueryRow(ctx, getBungalowByID, id)
	var i BungalowsUser
	err := row.Scan(&i.ID, &i.Capacity, &i.Users)
	return i, err
}

const getBungalowNbReservations = `-- name: GetBungalowNbReservations :one
SELECT COUNT(users.id) FROM users WHERE users.bungalow_id = $1
`

func (q *Queries) GetBungalowNbReservations(ctx context.Context, bungalowID sql.NullInt32) (int64, error) {
	row := q.db.QueryRow(ctx, getBungalowNbReservations, bungalowID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listBungalows = `-- name: ListBungalows :many
SELECT id, capacity, users FROM bungalows_users
`

func (q *Queries) ListBungalows(ctx context.Context) ([]BungalowsUser, error) {
	rows, err := q.db.Query(ctx, listBungalows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BungalowsUser
	for rows.Next() {
		var i BungalowsUser
		if err := rows.Scan(&i.ID, &i.Capacity, &i.Users); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
