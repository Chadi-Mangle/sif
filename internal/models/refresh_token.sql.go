// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_token.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_token (id, first_name, last_name, token, expires_at) 
VALUES ($1, $2, $3, $4, $5)
RETURNING id, first_name, last_name, is_revoked, token, expires_at, created_at
`

type CreateRefreshTokenParams struct {
	ID        string           `db:"id" json:"id"`
	FirstName string           `db:"first_name" json:"first_name"`
	LastName  string           `db:"last_name" json:"last_name"`
	Token     string           `db:"token" json:"token"`
	ExpiresAt pgtype.Timestamp `db:"expires_at" json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, createRefreshToken,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Token,
		arg.ExpiresAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.IsRevoked,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpiredTokens = `-- name: DeleteExpiredTokens :exec
DELETE FROM refresh_token WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredTokens)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT id, first_name, last_name, is_revoked, token, expires_at, created_at FROM refresh_token WHERE id = $1 AND is_revoked = false
`

func (q *Queries) GetRefreshToken(ctx context.Context, id string) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshToken, id)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.IsRevoked,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getRefreshTokenByToken = `-- name: GetRefreshTokenByToken :one
SELECT id, first_name, last_name, is_revoked, token, expires_at, created_at FROM refresh_token WHERE token = $1 AND is_revoked = false
`

func (q *Queries) GetRefreshTokenByToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshTokenByToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.IsRevoked,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const revokeAllUserTokens = `-- name: RevokeAllUserTokens :exec
UPDATE refresh_token SET is_revoked = true WHERE first_name = $1 AND last_name = $2
`

type RevokeAllUserTokensParams struct {
	FirstName string `db:"first_name" json:"first_name"`
	LastName  string `db:"last_name" json:"last_name"`
}

func (q *Queries) RevokeAllUserTokens(ctx context.Context, arg RevokeAllUserTokensParams) error {
	_, err := q.db.Exec(ctx, revokeAllUserTokens, arg.FirstName, arg.LastName)
	return err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_token SET is_revoked = true WHERE id = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, revokeRefreshToken, id)
	return err
}
