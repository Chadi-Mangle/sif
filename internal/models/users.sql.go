// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package models

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (first_name, last_name, has_paid, bungalow_id) VALUES ($1, $2, $3, $4)
RETURNING id, first_name, last_name, has_paid, bungalow_id
`

type CreateUserParams struct {
	FirstName  string `db:"first_name" json:"first_name"`
	LastName   string `db:"last_name" json:"last_name"`
	HasPaid    bool   `db:"has_paid" json:"has_paid"`
	BungalowID int32  `db:"bungalow_id" json:"bungalow_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.HasPaid,
		arg.BungalowID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.HasPaid,
		&i.BungalowID,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, first_name, last_name, has_paid, bungalow_id FROM users WHERE first_name = $1 AND last_name = $2
`

type GetUserByNameParams struct {
	FirstName string `db:"first_name" json:"first_name"`
	LastName  string `db:"last_name" json:"last_name"`
}

func (q *Queries) GetUserByName(ctx context.Context, arg GetUserByNameParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByName, arg.FirstName, arg.LastName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.HasPaid,
		&i.BungalowID,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, first_name, last_name, has_paid, bungalow_id FROM users ORDER BY last_name, first_name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.HasPaid,
			&i.BungalowID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setUserReservations = `-- name: SetUserReservations :one
UPDATE users SET bungalow_id = $1 WHERE id = $2
RETURNING id, first_name, last_name, has_paid, bungalow_id
`

type SetUserReservationsParams struct {
	BungalowID int32 `db:"bungalow_id" json:"bungalow_id"`
	ID         int32 `db:"id" json:"id"`
}

func (q *Queries) SetUserReservations(ctx context.Context, arg SetUserReservationsParams) (User, error) {
	row := q.db.QueryRow(ctx, setUserReservations, arg.BungalowID, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.HasPaid,
		&i.BungalowID,
	)
	return i, err
}
