package templates

import (
	"github.com/Chadi-Mangle/templ-hmr-setup/internal/models"
)

templ Admin(users []models.User) {
	@layout("Administration - SIF") {
		<div class="min-h-screen py-8">
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
				<!-- En-tête de la page -->
				<div class="mb-8">
					<div class="bg-white rounded-2xl shadow-xl border border-gray-100 p-8">
						<div class="flex items-center justify-between">
							<div>
								<h1 class="text-3xl font-bold text-gray-900 mb-2">
									Tableau de bord administrateur
								</h1>
								<p class="text-gray-600 text-lg">
									Gestion des membres inscrits et suivi des paiements
								</p>
							</div>
							<div class="flex items-center space-x-4">
								<div class="bg-blue-50 rounded-xl p-4">
									<div class="text-2xl font-bold text-blue-600">
										{ len(users) }
									</div>
									<div class="text-sm text-blue-500 font-medium">
										Membres inscrits
									</div>
								</div>
								<div class="bg-green-50 rounded-xl p-4">
									<div class="text-2xl font-bold text-green-600">
										{ getPaidCount(users) }
									</div>
									<div class="text-sm text-green-500 font-medium">
										Paiements effectués
									</div>
								</div>
								<div class="bg-orange-50 rounded-xl p-4">
									<div class="text-2xl font-bold text-orange-600">
										{ len(users) - getPaidCount(users) }
									</div>
									<div class="text-sm text-orange-500 font-medium">
										En attente
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>

				<!-- Tableau des membres -->
				<div class="bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden">
					<div class="px-6 py-4 border-b border-gray-200 bg-gray-50">
						<h2 class="text-xl font-semibold text-gray-900">
							Liste des membres
						</h2>
						<p class="text-sm text-gray-600 mt-1">
							Vue d'ensemble de tous les membres inscrits
						</p>
					</div>
					
					<div class="overflow-x-auto">
						<table class="min-w-full divide-y divide-gray-200">
							<thead class="bg-gray-50">
								<tr>
									<th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
										#
									</th>
									<th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
										Nom complet
									</th>
									<th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
										Statut de paiement
									</th>
									<th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
										Statut du compte
									</th>
									<th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
										Bungalow
									</th>
									<th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
										Actions
									</th>
								</tr>
							</thead>
							<tbody class="bg-white divide-y divide-gray-200">
								for i, user := range users {
									<tr class="hover:bg-gray-50 transition-colors duration-150">
										<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
											{ i + 1 }
										</td>
										<td class="px-6 py-4 whitespace-nowrap">
											<div class="flex items-center">
												<div class="flex-shrink-0 h-10 w-10">
													<div class="h-10 w-10 rounded-full bg-gradient-to-br from-blue-500 to-indigo-600 flex items-center justify-center">
														<span class="text-sm font-medium text-white">
															{ string(user.FirstName[0]) }{ string(user.LastName[0]) }
														</span>
													</div>
												</div>
												<div class="ml-4">
													<div class="text-sm font-medium text-gray-900">
														{ user.FirstName } { user.LastName }
													</div>
													<div class="text-sm text-gray-500">
														ID: { user.ID }
													</div>
												</div>
											</div>
										</td>
										<td class="px-6 py-4 whitespace-nowrap">
											if user.HasPaid {
												<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
													<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
														<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
													</svg>
													Payé
												</span>
											} else {
												<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
													<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
														<path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
													</svg>
													En attente
												</span>
											}
										</td>
										<td class="px-6 py-4 whitespace-nowrap">
											if user.IsAdmin {
												<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
													<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
														<path fill-rule="evenodd" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" clip-rule="evenodd"></path>
													</svg>
													Administrateur
												</span>
											} else if user.IsActivated {
												<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
													<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
														<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
													</svg>
													Actif
												</span>
											} else {
												<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
													<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
														<path fill-rule="evenodd" d="M13.477 14.89A6 6 0 015.11 6.524l8.367 8.368zm1.414-1.414L6.524 5.11a6 6 0 018.367 8.367zM18 10a8 8 0 11-16 0 8 8 0 0116 0z" clip-rule="evenodd"></path>
													</svg>
													Inactif
												</span>
											}
										</td>
										<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
											if user.BungalowID.Valid {
												<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-indigo-100 text-indigo-800">
													Bungalow #{ user.BungalowID.Int32 }
												</span>
											} else {
												<span class="text-gray-400 italic">
													Non assigné
												</span>
											}
										</td>
										<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
											<div class="flex items-center space-x-2">
												<button class="text-indigo-600 hover:text-indigo-900 transition-colors duration-150" onclick="togglePayment({ user.ID }, { user.HasPaid })">
													<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
														<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
													</svg>
												</button>
												<button class="text-gray-600 hover:text-gray-900 transition-colors duration-150" onclick="viewDetails({ user.ID })">
													<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
														<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
														<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
													</svg>
												</button>
											</div>
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>

				<!-- Actions rapides -->
				<div class="mt-8 grid grid-cols-1 md:grid-cols-3 gap-6">
					<div class="bg-white rounded-xl shadow-lg border border-gray-100 p-6">
						<div class="flex items-center">
							<div class="flex-shrink-0">
								<div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
									<svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
									</svg>
								</div>
							</div>
							<div class="ml-4">
								<h3 class="text-lg font-medium text-gray-900">Marquer tous comme payés</h3>
								<p class="text-sm text-gray-500">Marquer tous les membres comme ayant payé</p>
							</div>
						</div>
						<div class="mt-4">
							<button onclick="markAllAsPaid()" class="w-full bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors duration-150 font-medium">
								Exécuter
							</button>
						</div>
					</div>

					<div class="bg-white rounded-xl shadow-lg border border-gray-100 p-6">
						<div class="flex items-center">
							<div class="flex-shrink-0">
								<div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
									<svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
									</svg>
								</div>
							</div>
							<div class="ml-4">
								<h3 class="text-lg font-medium text-gray-900">Exporter les données</h3>
								<p class="text-sm text-gray-500">Télécharger la liste des membres en CSV</p>
							</div>
						</div>
						<div class="mt-4">
							<button onclick="exportToCSV()" class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-150 font-medium">
								Exporter
							</button>
						</div>
					</div>

					<div class="bg-white rounded-xl shadow-lg border border-gray-100 p-6">
						<div class="flex items-center">
							<div class="flex-shrink-0">
								<div class="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
									<svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
									</svg>
								</div>
							</div>
							<div class="ml-4">
								<h3 class="text-lg font-medium text-gray-900">Statistiques</h3>
								<p class="text-sm text-gray-500">Voir les statistiques détaillées</p>
							</div>
						</div>
						<div class="mt-4">
							<button onclick="showStatistics()" class="w-full bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors duration-150 font-medium">
								Voir les stats
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>

		<!-- Scripts JavaScript -->
		<script>
			function togglePayment(userId, currentStatus) {
				if (confirm(`Êtes-vous sûr de vouloir ${currentStatus ? 'marquer comme non payé' : 'marquer comme payé'} ce membre ?`)) {
					// Ici, vous pouvez faire un appel AJAX pour mettre à jour le statut
					fetch(`/admin/toggle-payment/${userId}`, {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
					})
					.then(response => response.json())
					.then(data => {
						if (data.success) {
							location.reload();
						} else {
							alert('Erreur lors de la mise à jour du statut de paiement');
						}
					})
					.catch(error => {
						console.error('Erreur:', error);
						alert('Erreur lors de la mise à jour du statut de paiement');
					});
				}
			}

			function viewDetails(userId) {
				// Ici, vous pouvez ouvrir une modal ou rediriger vers une page de détails
				alert(`Détails du membre ID: ${userId}`);
			}

			function markAllAsPaid() {
				if (confirm('Êtes-vous sûr de vouloir marquer tous les membres comme ayant payé ?')) {
					fetch('/admin/mark-all-paid', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
					})
					.then(response => response.json())
					.then(data => {
						if (data.success) {
							location.reload();
						} else {
							alert('Erreur lors de la mise à jour des statuts de paiement');
						}
					})
					.catch(error => {
						console.error('Erreur:', error);
						alert('Erreur lors de la mise à jour des statuts de paiement');
					});
				}
			}

			function exportToCSV() {
				// Ici, vous pouvez implémenter l'export CSV
				alert('Fonctionnalité d\'export CSV à implémenter');
			}

			function showStatistics() {
				// Ici, vous pouvez afficher des statistiques détaillées
				alert('Fonctionnalité de statistiques à implémenter');
			}
		</script>
	}
}

func getPaidCount(users []models.User) int {
	count := 0
	for _, user := range users {
		if user.HasPaid {
			count++
		}
	}
	return count
}
